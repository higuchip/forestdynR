return(result)
})
}
forest_dyn(forest_df, 5, c(-50.17,-27.71))
create_din_df <- function(data_list, col_names, round_digits) {
rounded_data <- lapply(data_list, function(x)
if (is.numeric(x))
round(x, round_digits)
else
x)
df <- do.call(cbind, rounded_data)
colnames(df) <- col_names
return(df)
}
forest_dyn(forest_df, 5, c(-50.17,-27.71))
create_din_df <- function(data_list, col_names, round_digits) {
rounded_data <- lapply(data_list, function(x)
if (is.numeric(x))
round(x, round_digits)
else
x)
df <- do.call(cbind, rounded_data)
colnames(df) <- col_names
return(df)
}
create_din_df <- function(data_list, col_names, round_digits) {
rounded_data <- lapply(data_list, function(x)
if (is.numeric(x))
round(x, round_digits)
else
x)
df <- do.call(cbind, rounded_data)
colnames(df) <- col_names
return(df)
}
sdrn_metrics <- function(forest_df, group_var, inv_time) {
# n_sur, n_death and n_rec per group
results <- by(forest_df, forest_df[[group_var]], function(sub_df) {
n_sur <- nrow(sub_df[sub_df$DBH_1 > 0 & sub_df$DBH_2 > 0, ])
n_death <- nrow(sub_df[sub_df$DBH_1 > 0 & sub_df$DBH_2 == 0, ])
n_rec <- nrow(sub_df[sub_df$DBH_1 == 0 & sub_df$DBH_2 > 0, ])
return(list(
n_sur = n_sur,
n_death = n_death,
n_rec = n_rec
))
})
# Extract results
n_sur <- sapply(results, `[[`, "n_sur")
n_death <- sapply(results, `[[`, "n_death")
n_rec <- sapply(results, `[[`, "n_rec")
# Calculate n_n0 and n_n1
n_n0 <- n_sur + n_death
n_n1 <- n_sur + n_rec
# Calculate group ratings
death_rate <- (1 - (((n_n0 - n_death) / n_n0) ^ (1 / inv_time))) * 100
rec_rate <- (1 - (1 - (n_rec / n_n1)) ^ (1 / inv_time)) * 100
nc_rate <- (((n_n1 / n_n0) ^ (1 / inv_time)) - 1) * 100
turn <- (death_rate + rec_rate) / 2
return(
list(
n_sur = n_sur,
n_death = n_death,
n_rec = n_rec,
n_n0 = n_n0,
n_n1 = n_n1,
death_rate = death_rate,
rec_rate = rec_rate,
nc_rate = nc_rate,
turn = turn
)
)
}
forest_dyn <- function(forest_df, inv_time, coord, add_wd = NULL) {
# Testing initial data:
if (missing(forest_df))
stop("ERROR:Dataframe is missing")
forest_df <- as.data.frame(forest_df)
forest_df[is.na(forest_df)] <- 0
message("NA's were turned into 0")
check_result <- check_format(forest_df)
if (check_result$status == FALSE)
return(paste("ERROR:", check_result$message))
# Creating the objects:
spp <- as.character(forest_df$spp)
words <- strsplit(as.character(spp), " ")
genus <- sapply(words, "[", 1)
specie <- sapply(words, "[", 2)
# Getting wood density:
wd <- BIOMASS::getWoodDensity(genus = genus,
species = specie,
addWoodDensityData = add_wd)
forest_df$wd <- wd$meanWD
# Above-ground biomass (ton):
#First measure:
forest_df$AGB1 <- BIOMASS::computeAGB(forest_df$DBH_1, forest_df$wd, coord = coord)
#Second Measure:
forest_df$AGB2 <- BIOMASS::computeAGB(forest_df$DBH_2, forest_df$wd, coord = coord)
# Sectional area:
forest_df$SA1 <- (pi * forest_df$DBH_1 ^ 2) / 40000
forest_df$SA2 <- (pi * forest_df$DBH_2 ^ 2) / 40000
forest_df$SA_difference <- forest_df$SA2 - forest_df$SA1
# Survivors, deaths, recruits, n0 and n1 per plot:
n_sur_plot <- sdrn_metrics(forest_df, "plot", inv_time)$n_sur
n_death_plot <- sdrn_metrics(forest_df, "plot", inv_time)$n_death
n_rec_plot <- sdrn_metrics(forest_df, "plot", inv_time)$n_rec
n_n0_plot <- sdrn_metrics(forest_df, "plot", inv_time)$n_n0
n_n1_plot <- sdrn_metrics(forest_df, "plot", inv_time)$n_n1
# Survivors, deaths, recruits, n0 and n1 per species:
n_sur_spp <- sdrn_metrics(forest_df, "spp", inv_time)$n_sur
n_death_spp <- sdrn_metrics(forest_df, "spp", inv_time)$n_death
n_rec_spp <- sdrn_metrics(forest_df, "spp", inv_time)$n_rec
n_n0_spp <- sdrn_metrics(forest_df, "spp", inv_time)$n_n0
n_n1_spp <- sdrn_metrics(forest_df, "spp", inv_time)$n_n1
# Rates per plot:
death_rate_plot <- sdrn_metrics(forest_df, "plot", inv_time)$death_rate
rec_rate_plot <- sdrn_metrics(forest_df, "plot", inv_time)$rec_rate
nc_rate_plot <- sdrn_metrics(forest_df, "plot", inv_time)$nc_rate
turn_plot <- sdrn_metrics(forest_df, "plot", inv_time)$turn
# Rates per species:
death_rate_spp <- sdrn_metrics(forest_df, "spp", inv_time)$death_rate
rec_rate_spp <- sdrn_metrics(forest_df, "spp", inv_time)$rec_rate
nc_rate_spp <- sdrn_metrics(forest_df, "spp", inv_time)$nc_rate
turn_spp <- sdrn_metrics(forest_df, "spp", inv_time)$turn
# Basal area and Biomass
basal_area_biomass_metrics_plot <- ba_b_metrics(forest_df, "plot", inv_time)
basal_area_biomass_metrics_spp <- ba_b_metrics(forest_df, "spp", inv_time)
# Metrics per plot
ba_n0_plot <- basal_area_biomass_metrics_plot$ba_n0
biomass_n0_plot <- basal_area_biomass_metrics_plot$biomass_n0
sur_gain_ba_plot <- basal_area_biomass_metrics_plot$sur_gain
sur_loss_ba_plot <- basal_area_biomass_metrics_plot$sur_loss
death_ba_plot <- basal_area_biomass_metrics_plot$death_ba
rec_ba_plot <- basal_area_biomass_metrics_plot$rec_ba
ba_n1_plot <- basal_area_biomass_metrics_plot$ba_n1
biomass_n1_plot <- basal_area_biomass_metrics_plot$biomass_n1
loss_rate_ba_plot <- basal_area_biomass_metrics_plot$loss_rate_ba
gain_rate_ba_plot <- basal_area_biomass_metrics_plot$gain_rate_ba
nc_rate_ba_plot <- basal_area_biomass_metrics_plot$nc_rate_ba
turn_ba_plot <- basal_area_biomass_metrics_plot$turn_ba
# Metrics per spp
ba_n0_spp <- basal_area_biomass_metrics_spp$ba_n0
biomass_n0_spp <- basal_area_biomass_metrics_spp$biomass_n0
sur_gain_ba_spp <- basal_area_biomass_metrics_spp$sur_gain
sur_loss_ba_spp <- basal_area_biomass_metrics_spp$sur_loss
death_ba_spp <- basal_area_biomass_metrics_spp$death_ba
rec_ba_spp <- basal_area_biomass_metrics_spp$rec_ba
ba_n1_spp <- basal_area_biomass_metrics_spp$ba_n1
biomass_n1_spp <- basal_area_biomass_metrics_spp$biomass_n1
loss_rate_ba_spp <- basal_area_biomass_metrics_spp$loss_rate_ba
gain_rate_ba_spp <- basal_area_biomass_metrics_spp$gain_rate_ba
nc_rate_ba_spp <- basal_area_biomass_metrics_spp$nc_rate_ba
turn_ba_spp <- basal_area_biomass_metrics_spp$turn_ba
# Results
plot_ind_data <- list(
n_n0_plot,
n_sur_plot,
n_death_plot,
n_rec_plot,
n_n1_plot,
death_rate_plot,
rec_rate_plot,
nc_rate_plot,
turn_plot
)
plot_ind_names <- c(
"n0",
"survivor",
"death",
"recruitment",
"n1",
"death_rate",
"recruitment_rate",
"net_change_rate",
"turn"
)
spp_ind_data <- list(
n_n0_spp,
n_sur_spp,
n_death_spp,
n_rec_spp,
n_n1_spp,
death_rate_spp,
rec_rate_spp,
nc_rate_spp,
turn_spp
)
spp_ind_names <- plot_ind_names
plot_ba_data <- list(
ba_n0_plot,
biomass_n0_plot,
sur_gain_ba_plot,
sur_loss_ba_plot,
death_ba_plot,
rec_ba_plot,
ba_n1_plot,
biomass_n1_plot,
loss_rate_ba_plot,
gain_rate_ba_plot,
nc_rate_ba_plot,
turn_ba_plot
)
plot_ba_names <- c(
"BA_0",
"AGB_0",
"sur_gain",
"sur_loss",
"BA_m",
"BA_r",
"BA_1",
"AGB_1",
"BA_loss_rate",
"BA_gain_rate",
"BA_net_change_rate",
"BA_turn"
)
spp_ba_data <- list(
ba_n0_spp,
biomass_n0_spp,
sur_gain_ba_spp,
sur_loss_ba_spp,
death_ba_spp,
rec_ba_spp,
ba_n1_spp,
biomass_n1_spp,
loss_rate_ba_spp,
gain_rate_ba_spp,
nc_rate_spp,
turn_spp
)
spp_ba_names <- plot_ba_names
# Creating data frames:
dyn_plot_ind <- create_dyn_df(plot_ind_data, plot_ind_names, 2)
dyn_spp_ind <- create_dyn_df(spp_ind_data, spp_ind_names, 2)
dyn_ba_plot <- create_dyn_df(plot_ba_data, plot_ba_names, 4)
dyn_ba_spp <- create_dyn_df(spp_ba_data, spp_ba_names, 4)
# Creating final list:
dynamics <- list(
n_plot = dyn_plot_ind,
n_species = dyn_spp_ind,
basal_area_plot = dyn_ba_plot,
basal_area_species = dyn_ba_spp
)
sum_and_sd <- function(x) {
list(sum = sum(x), sd = sd(x))
}
# Abundance
n0_stats <- sum_and_sd(dyn_plot_ind[, 1])
n_death <- sum(dyn_plot_ind[, 3])
n_rec <- sum(dyn_plot_ind[, 4])
n1_stats <- sum_and_sd(dyn_plot_ind[, 5])
# Basal area
ba_sur_gain <- sum(dyn_ba_plot[, 3])
ba_sur_loss <- sum(dyn_ba_plot[, 4])
ba_rec <- sum(dyn_ba_plot[, 6])
ba_death <- sum(dyn_ba_plot[, 5])
BA_0_stats <- sum_and_sd(dyn_ba_plot[, 1])
ba_1_stats <- sum_and_sd(dyn_ba_plot[, 7])
# Biomass
BAS1_stats <- sum_and_sd(dyn_ba_plot[, 2])
BAS2_stats <- sum_and_sd(dyn_ba_plot[, 8])
# Richness
get_richness <- function(year_col) {
subset_year <- forest_df[forest_df[[year_col]] > 0, ]
spp_matrix <- table(subset_year$plot, subset_year$spp)
ncol(spp_matrix[, apply(spp_matrix, 2, sum) > 0])
}
s_year_1 <- get_richness("DBH_1")
s_year_2 <- get_richness("DBH_2")
# N total
n_dyn_total <- apply(dynamics[[1]], 2, sum)
n_death_rate_total <- (1 - (((n_dyn_total[1] - n_dyn_total[3]) / n_dyn_total[1]
) ^ (1 / inv_time))) * 100
n_rec_rate_total <- (1 - (1 - (n_dyn_total[4] / n_dyn_total[5])) ^ (1 / inv_time)) * 100
n_nc_rate_total <- ((n_dyn_total[5] / n_dyn_total[1]) ^ (1 / inv_time) - 1) * 100
n_turn_total <- (n_death_rate_total + n_rec_rate_total) / 2
# BA total
ba1_dyn_total <- apply(dynamics[[3]], 2, sum)
BA_gain_total <- ba1_dyn_total[3] + ba1_dyn_total[6]
BA_loss_total <- ba1_dyn_total[4] - ba1_dyn_total[5]
ba_total_loss_rate <- (1 - (((ba1_dyn_total[1] + BA_loss_total) / ba1_dyn_total[1]
) ^ (1 / inv_time))) * 100
ba_total_gain_rate <- (1 - (1 - (BA_gain_total / ba1_dyn_total[7])) ^ (1 / inv_time)) * 100
ba_total_nc_rate <- ((ba1_dyn_total[7] / ba1_dyn_total[1]) ^ (1 / inv_time) - 1) * 100
ba_total_turn <- (ba_total_loss_rate + ba_total_gain_rate) / 2
print(dynamics)
# Format and print
format_message <- function(label,
value,
unit = "",
precision = 2) {
sprintf("%s = %.2f %s", label, round(value, precision), unit)
}
# Report Title
cat("***************  TOTAL COMMUNITY DYNAMICS  ***************\n",
fill = TRUE)
# Richness Section
cat("\nRICHNESS:\n", fill = TRUE)
cat(format_message("Richness year 1", s_year_1, "species"), "\n")
cat(format_message("Richness year 2", s_year_2, "species"), "\n")
# Abundance Section
cat("\nABUNDANCE:\n", fill = TRUE)
cat(
format_message("Abundance year 1", n0_stats$sum, "ind", 2),
" +/- ",
round(n0_stats$sd, 2),
"\n"
)
cat(
format_message("Abundance year 2", n1_stats$sum, "ind", 2),
" +/- ",
round(n1_stats$sd, 2),
"\n"
)
# Dynamics Rate Section
cat("\nDYNAMIC RATES:\n", fill = TRUE)
cat(format_message("Mortality Rate", n_death_rate_total, "% year⁻¹", 2),
"\n")
cat(format_message("Recruitment Rate", n_rec_rate_total, "% year⁻¹", 2),
"\n")
cat(format_message("Net Change Rate in n", n_nc_rate_total, "% year⁻¹", 2),
"\n")
cat(format_message("Net Turnover Rate in n", n_turn_total, "% year⁻¹", 2),
"\n")
# Basal Area Section
cat("\nBASAL AREA:\n", fill = TRUE)
cat(
format_message("Basal Area year 1", BA_0_stats$sum, "m²", 2),
" +/- ",
round(BA_0_stats$sd, 2),
"\n"
)
cat(
format_message("Basal Area year 2", ba_1_stats$sum, "m²", 2),
" +/- ",
round(ba_1_stats$sd, 2),
"\n"
)
cat(format_message("Basal Area Loss Rate", ba_total_loss_rate, "% year⁻¹", 2),
"\n")
cat(format_message("Basal Area Gain Rate", ba_total_gain_rate, "% year⁻¹", 2),
"\n")
cat(format_message("Net Change Rate in BA", ba_total_nc_rate, "% year⁻¹", 2),
"\n")
cat(format_message("Net Turnover Rate in BA", ba_total_turn, "% year⁻¹", 2),
"\n")
# Biomass Section
cat("\nBIOMASSs:\n", fill = TRUE)
cat(
format_message("Biomass year 1", BAS1_stats$sum, "tons", 2),
" +/- ",
round(BAS1_stats$sd, 2),
"\n"
)
cat(
format_message("Biomass year 2", BAS2_stats$sum, "tons", 2),
" +/- ",
round(BAS2_stats$sd, 2),
"\n"
)
# Saving files in your computer
save_dyn_files(dynamics)
}
save_dyn_files <- function(dynamics) {
folder_path <- tcltk::tk_choose.dir(default = "", caption = "Select the folder to save the files")
if (is.na(folder_path) || folder_path == "") {
cat("No folder selected. The files will not be saved.\n")
return(NULL)
}
file_paths <- c(
paste0(folder_path, "/dynamics_n_parcelas.csv"),
paste0(folder_path, "/dynamics_n_especies.csv"),
paste0(folder_path, "/dynamics_ab_especies.csv"),
paste0(folder_path, "/dynamics_ab_parcelas.csv")
)
write.table(dynamics[[1]], file = file_paths[1], row.names = TRUE, dec = ",", sep = ";", quote = FALSE)
write.table(dynamics[[2]], file = file_paths[2], row.names = TRUE, dec = ",", sep = ";", quote = FALSE)
write.table(dynamics[[4]], file = file_paths[3], row.names = TRUE, dec = ",", sep = ";", quote = FALSE)
write.table(dynamics[[3]], file = file_paths[4], row.names = TRUE, dec = ",", sep = ";", quote = FALSE)
cat("Files have been saved to:\n")
cat(file_paths, sep = "\n")
}
ba_b_metrics <- function(forest_df, group_var, inv_time) {
calculate_subset_sum <- function(sub_df, type) {
if (type == "sur_gain") {
sur_subset <- sub_df[sub_df$DBH_1 > 0 & sub_df$DBH_2 > 0, ]
return(sum(sur_subset[sur_subset$SA_difference > 0, "SA_difference"]))
} else if (type == "sur_loss") {
sur_subset <- sub_df[sub_df$DBH_1 > 0 & sub_df$DBH_2 > 0, ]
return(sum(sur_subset[sur_subset$SA_difference < 0, "SA_difference"]))
} else if (type == "rec") {
rec_subset <- sub_df[sub_df$DBH_1 == 0 & sub_df$DBH_2 > 0, ]
return(sum(rec_subset$AS2))
} else if (type == "death") {
death_subset <- sub_df[sub_df$DBH_1 > 0 & sub_df$DBH_2 == 0, ]
return(sum(death_subset$AS1))
} else {
return(NA)
}
}
# BA metrics per group
sur_gain <- as.matrix(by(forest_df, forest_df[[group_var]], calculate_subset_sum, type = "sur_gain"))
sur_loss <- as.matrix(by(forest_df, forest_df[[group_var]], calculate_subset_sum, type = "sur_loss"))
rec_ba <- as.matrix(by(forest_df, forest_df[[group_var]], calculate_subset_sum, type = "rec"))
death_ba <- as.matrix(by(forest_df, forest_df[[group_var]], calculate_subset_sum, type = "death"))
# BA loss and gain
BA_gain <- sur_gain + rec_ba
BA_loss <- sur_loss - death_ba
# Agregate BA t=0 and t=1
ba_n0 <- aggregate(forest_df$SA1,
by = list(Group = forest_df[[group_var]]),
FUN = sum)$x
ba_n1 <- aggregate(forest_df$SA2,
by = list(Group = forest_df[[group_var]]),
FUN = sum)$x
# Rates
loss_rate_ba <- (1 - (((ba_n0 + BA_loss) / ba_n0) ^ (1 / inv_time))) * 100
gain_rate_ba <- (1 - (1 - (BA_gain / ba_n1)) ^ (1 / inv_time)) * 100
nc_rate_ba <- (((ba_n1 / ba_n0) ^ (1 / inv_time)) - 1) * 100
turn_ba <- (loss_rate_ba + gain_rate_ba) / 2
# B per groups
biomass_n0 <- aggregate(forest_df$AGB1,
by = list(Group = forest_df[[group_var]]),
FUN = sum)$x
biomass_n1 <- aggregate(forest_df$AGB2,
by = list(Group = forest_df[[group_var]]),
FUN = sum)$x
return(
list(
sur_gain = sur_gain,
sur_loss = sur_loss,
rec_ba = rec_ba,
death_ba = death_ba,
BA_gain = BA_gain,
BA_loss = BA_loss,
ba_n0 = ba_n0,
ba_n1 = ba_n1,
loss_rate_ba = loss_rate_ba,
gain_rate_ba = gain_rate_ba,
nc_rate_ba = nc_rate_ba,
turn_ba = turn_ba,
biomass_n0 = biomass_n0,
biomass_n1 = biomass_n1
)
)
}
check_format <- function(forest_df, verbose = TRUE) {
result <- list(status = TRUE, message = NULL)
tryCatch({
if (!is.data.frame(forest_df))
stop("Input is not a dataframe.")
if (!"plot" %in% names(forest_df))
stop("Dataframe must have a column named 'plot'.")
if (!"spp" %in% names(forest_df))
stop("Dataframe must have a column named 'spp'.")
if (!"DBH_1" %in% names(forest_df))
stop("Dataframe must have a column named 'DBH_1'.")
if (!"DBH_2" %in% names(forest_df))
stop("Dataframe must have a column named 'DBH_2'.")
if (!is.numeric(forest_df$DBH_1) == TRUE)
stop("Column: 'DBH_1' must be numeric.")
if (!is.numeric(forest_df$DBH_2) == TRUE)
stop("Column: 'DBH_2' must be numeric.")
return(result)
}, error = function(e) {
result$status <- FALSE
result$message <- e$message
if (verbose)
message("An error occurred: ", e$message)
return(result)
}, warning = function(w) {
result$status <- NA
result$message <- w$message
if (verbose)
message("A warning occurred: ", w$message)
return(result)
})
}
forest_df <- read.csv2("data/forest_df_example.csv")
View(forest_df)
forest_dyn(forest_df, 5, c(-50.17,-27.71))
create_dyn_df <- function(data_list, col_names, round_digits) {
rounded_data <- lapply(data_list, function(x)
if (is.numeric(x))
round(x, round_digits)
else
x)
df <- do.call(cbind, rounded_data)
colnames(df) <- col_names
return(df)
}
forest_df <- read.csv2("data/forest_df_example.csv")
forest_dyn(forest_df, 5, c(-50.17,-27.71))
devtools::check()
tools::showNonASCIIfile("R/forest_dyn.R")
devtools::check()
usethis::use_namespace()
devtools::document()
devtools::check()
View(forest_df)
View(forest_df)
forest_dyn(forest_df, 5, c(-50.17,-27.71))
devtools::install()
library(forestdynR)
data("forest_df_example")
coord <- c(-50.17,-27.71)
forest_dyn(forest_df, inv_time = 5, coord = coord)
forest_dyn(forest_df_example, inv_time = 5, coord = coord)
devtools::check()
devtools::document()
devtools::check()
devtools::build()
